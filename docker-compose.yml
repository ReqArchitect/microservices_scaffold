version: '3.8'

x-service-defaults: &service-defaults
  restart: always
  networks:
    - backend
  depends_on:
    - postgres
    - redis
  environment:
    REDIS_URL: ${REDIS_URL}
    JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    POSTGRES_HOST: ${POSTGRES_HOST}
    POSTGRES_PORT: ${POSTGRES_PORT}
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  user_service:
    <<: *service-defaults
    build: ./user_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${USER_SERVICE_DATABASE_URL}
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth_service:
    <<: *service-defaults
    build: ./auth_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${AUTH_SERVICE_DATABASE_URL}
    ports:
      - "5001:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  initiative_service:
    <<: *service-defaults
    build: ./initiative_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${INITIATIVE_SERVICE_DATABASE_URL}
    ports:
      - "5002:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  business_layer_service:
    <<: *service-defaults
    build: ./business_layer_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${BUSINESS_LAYER_SERVICE_DATABASE_URL}
    ports:
      - "5003:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  strategy_service:
    <<: *service-defaults
    build: ./strategy_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${STRATEGY_SERVICE_DATABASE_URL}
    ports:
      - "5004:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  kpi_service:
    <<: *service-defaults
    build: ./kpi_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${KPI_SERVICE_DATABASE_URL}
    ports:
      - "5005:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  business_case_service:
    <<: *service-defaults
    build: ./business_case_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${BUSINESS_CASE_SERVICE_DATABASE_URL}
    ports:
      - "5006:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification_service:
    <<: *service-defaults
    build: ./notification_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${NOTIFICATION_SERVICE_DATABASE_URL}
    ports:
      - "5007:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5007/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  billing_service:
    <<: *service-defaults
    build: ./billing_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${BILLING_SERVICE_DATABASE_URL}
    ports:
      - "5008:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5008/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  file_service:
    <<: *service-defaults
    build: ./file_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${FILE_SERVICE_DATABASE_URL}
    ports:
      - "5009:5000"
    volumes:
      - ./file_service/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5009/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  implementation_migration_service:
    <<: *service-defaults
    build: ./implementation_migration_service
    environment:
      <<: *service-defaults
      SQLALCHEMY_DATABASE_URI: ${IMPLEMENTATION_MIGRATION_SERVICE_DATABASE_URL}
    ports:
      - "5010:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5010/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  e2e_tests:
    build:
      context: .
      dockerfile: docs/Dockerfile.e2e
    depends_on:
      - strategy_service
      - business_layer_service
      - user_service
      - auth_service
      - initiative_service
      - kpi_service
      - business_case_service
    networks:
      - backend
    environment:
      STRATEGY_URL: http://strategy_service:5004/api/capabilities
      BUSINESS_URL: http://business_layer_service:5003/api/business_actors
      USER_SERVICE_URL: http://user_service:5000/health
      AUTH_SERVICE_URL: http://auth_service:5001/health
      INITIATIVE_SERVICE_URL: http://initiative_service:5002/health
      KPI_SERVICE_URL: http://kpi_service:5005/health
      BUSINESS_CASE_SERVICE_URL: http://business_case_service:5006/health
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
